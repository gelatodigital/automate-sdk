/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ProxyModuleInterface extends utils.Interface {
  functions: {
    "execAddresses(bytes32)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "onCreateTask(bytes32,address,address,bytes,bytes)": FunctionFragment;
    "opsProxyFactory()": FunctionFragment;
    "postExecCall(bytes32,address,address,bytes)": FunctionFragment;
    "preCancelTask(bytes32,address)": FunctionFragment;
    "preCreateTask(address,address)": FunctionFragment;
    "preExecCall(bytes32,address,address,bytes)": FunctionFragment;
    "taskCreator(bytes32)": FunctionFragment;
    "taskModuleAddresses(uint8)": FunctionFragment;
    "timedTask(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "execAddresses"
      | "fee"
      | "feeToken"
      | "onCreateTask"
      | "opsProxyFactory"
      | "postExecCall"
      | "preCancelTask"
      | "preCreateTask"
      | "preExecCall"
      | "taskCreator"
      | "taskModuleAddresses"
      | "timedTask",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "execAddresses",
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onCreateTask",
    values: [BytesLike, string, string, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "opsProxyFactory",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "postExecCall",
    values: [BytesLike, string, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "preCancelTask",
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "preCreateTask",
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "preExecCall",
    values: [BytesLike, string, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "taskCreator",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "taskModuleAddresses",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "timedTask",
    values: [BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "execAddresses",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onCreateTask",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "opsProxyFactory",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "postExecCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "preCancelTask",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "preCreateTask",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "preExecCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskCreator",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskModuleAddresses",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "timedTask", data: BytesLike): Result;

  events: {};
}

export interface ProxyModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execAddresses(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    onCreateTask(
      arg0: BytesLike,
      _taskCreator: string,
      arg2: string,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    opsProxyFactory(overrides?: CallOverrides): Promise<[string]>;

    postExecCall(
      taskId: BytesLike,
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    preCancelTask(
      arg0: BytesLike,
      _taskCreator: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    preCreateTask(
      _taskCreator: string,
      _execAddress: string,
      overrides?: CallOverrides,
    ): Promise<[string, string]>;

    preExecCall(
      arg0: BytesLike,
      _taskCreator: string,
      _execAddress: string,
      _execData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { execData: string }>;

    taskCreator(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    taskModuleAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    timedTask(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { nextExec: BigNumber; interval: BigNumber }
    >;
  };

  execAddresses(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  onCreateTask(
    arg0: BytesLike,
    _taskCreator: string,
    arg2: string,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  opsProxyFactory(overrides?: CallOverrides): Promise<string>;

  postExecCall(
    taskId: BytesLike,
    taskCreator: string,
    execAddress: string,
    execData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  preCancelTask(
    arg0: BytesLike,
    _taskCreator: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  preCreateTask(
    _taskCreator: string,
    _execAddress: string,
    overrides?: CallOverrides,
  ): Promise<[string, string]>;

  preExecCall(
    arg0: BytesLike,
    _taskCreator: string,
    _execAddress: string,
    _execData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[string, string] & { execData: string }>;

  taskCreator(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  taskModuleAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  timedTask(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & { nextExec: BigNumber; interval: BigNumber }
  >;

  callStatic: {
    execAddresses(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    onCreateTask(
      arg0: BytesLike,
      _taskCreator: string,
      arg2: string,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    opsProxyFactory(overrides?: CallOverrides): Promise<string>;

    postExecCall(
      taskId: BytesLike,
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    preCancelTask(
      arg0: BytesLike,
      _taskCreator: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    preCreateTask(
      _taskCreator: string,
      _execAddress: string,
      overrides?: CallOverrides,
    ): Promise<[string, string]>;

    preExecCall(
      arg0: BytesLike,
      _taskCreator: string,
      _execAddress: string,
      _execData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { execData: string }>;

    taskCreator(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    taskModuleAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    timedTask(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { nextExec: BigNumber; interval: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    execAddresses(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    onCreateTask(
      arg0: BytesLike,
      _taskCreator: string,
      arg2: string,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    opsProxyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    postExecCall(
      taskId: BytesLike,
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    preCancelTask(
      arg0: BytesLike,
      _taskCreator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    preCreateTask(
      _taskCreator: string,
      _execAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    preExecCall(
      arg0: BytesLike,
      _taskCreator: string,
      _execAddress: string,
      _execData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    taskCreator(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    taskModuleAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    timedTask(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    execAddresses(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onCreateTask(
      arg0: BytesLike,
      _taskCreator: string,
      arg2: string,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    opsProxyFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postExecCall(
      taskId: BytesLike,
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    preCancelTask(
      arg0: BytesLike,
      _taskCreator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    preCreateTask(
      _taskCreator: string,
      _execAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    preExecCall(
      arg0: BytesLike,
      _taskCreator: string,
      _execAddress: string,
      _execData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    taskCreator(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    taskModuleAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    timedTask(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
