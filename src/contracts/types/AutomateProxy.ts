/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AutomateProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchExecuteCall"
      | "executeCall"
      | "ops"
      | "owner"
      | "version",
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ExecuteCall"): EventFragment;

  encodeFunctionData(
    functionFragment: "batchExecuteCall",
    values: [AddressLike[], BytesLike[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "executeCall",
    values: [AddressLike, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "batchExecuteCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ExecuteCallEvent {
  export type InputTuple = [
    target: AddressLike,
    data: BytesLike,
    value: BigNumberish,
    returnData: BytesLike,
  ];
  export type OutputTuple = [
    target: string,
    data: string,
    value: bigint,
    returnData: string,
  ];
  export interface OutputObject {
    target: string;
    data: string;
    value: bigint;
    returnData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AutomateProxy extends BaseContract {
  connect(runner?: ContractRunner | null): AutomateProxy;
  waitForDeployment(): Promise<this>;

  interface: AutomateProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  batchExecuteCall: TypedContractMethod<
    [_targets: AddressLike[], _datas: BytesLike[], _values: BigNumberish[]],
    [void],
    "payable"
  >;

  executeCall: TypedContractMethod<
    [_target: AddressLike, _data: BytesLike, _value: BigNumberish],
    [void],
    "payable"
  >;

  ops: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "batchExecuteCall",
  ): TypedContractMethod<
    [_targets: AddressLike[], _datas: BytesLike[], _values: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeCall",
  ): TypedContractMethod<
    [_target: AddressLike, _data: BytesLike, _value: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ops",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version",
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ExecuteCall",
  ): TypedContractEvent<
    ExecuteCallEvent.InputTuple,
    ExecuteCallEvent.OutputTuple,
    ExecuteCallEvent.OutputObject
  >;

  filters: {
    "ExecuteCall(address,bytes,uint256,bytes)": TypedContractEvent<
      ExecuteCallEvent.InputTuple,
      ExecuteCallEvent.OutputTuple,
      ExecuteCallEvent.OutputObject
    >;
    ExecuteCall: TypedContractEvent<
      ExecuteCallEvent.InputTuple,
      ExecuteCallEvent.OutputTuple,
      ExecuteCallEvent.OutputObject
    >;
  };
}
