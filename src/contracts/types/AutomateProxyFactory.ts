/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AutomateProxyFactoryInterface extends utils.Interface {
  functions: {
    "deploy()": FunctionFragment;
    "deployFor(address)": FunctionFragment;
    "determineProxyAddress(address)": FunctionFragment;
    "getNextSeed(address)": FunctionFragment;
    "getOwnerOf(address)": FunctionFragment;
    "getProxyOf(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "isProxy(address)": FunctionFragment;
    "ops()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploy"
      | "deployFor"
      | "determineProxyAddress"
      | "getNextSeed"
      | "getOwnerOf"
      | "getProxyOf"
      | "implementation"
      | "isProxy"
      | "ops"
      | "version",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "deploy", values?: undefined): string;
  encodeFunctionData(functionFragment: "deployFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "determineProxyAddress",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "getNextSeed", values: [string]): string;
  encodeFunctionData(functionFragment: "getOwnerOf", values: [string]): string;
  encodeFunctionData(functionFragment: "getProxyOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "isProxy", values: [string]): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "determineProxyAddress",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSeed",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getOwnerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProxyOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "isProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "DeployProxy(address,address,bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployProxy"): EventFragment;
}

export interface DeployProxyEventObject {
  deployer: string;
  owner: string;
  seed: string;
  salt: string;
  proxy: string;
}
export type DeployProxyEvent = TypedEvent<
  [string, string, string, string, string],
  DeployProxyEventObject
>;

export type DeployProxyEventFilter = TypedEventFilter<DeployProxyEvent>;

export interface AutomateProxyFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AutomateProxyFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    determineProxyAddress(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getNextSeed(_account: string, overrides?: CallOverrides): Promise<[string]>;

    getOwnerOf(_proxy: string, overrides?: CallOverrides): Promise<[string]>;

    getProxyOf(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<[string, boolean]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    isProxy(proxy: string, overrides?: CallOverrides): Promise<[boolean]>;

    ops(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  deployFor(
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  determineProxyAddress(
    _account: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  getNextSeed(_account: string, overrides?: CallOverrides): Promise<string>;

  getOwnerOf(_proxy: string, overrides?: CallOverrides): Promise<string>;

  getProxyOf(
    _account: string,
    overrides?: CallOverrides,
  ): Promise<[string, boolean]>;

  implementation(overrides?: CallOverrides): Promise<string>;

  isProxy(proxy: string, overrides?: CallOverrides): Promise<boolean>;

  ops(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    deploy(overrides?: CallOverrides): Promise<string>;

    deployFor(owner: string, overrides?: CallOverrides): Promise<string>;

    determineProxyAddress(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    getNextSeed(_account: string, overrides?: CallOverrides): Promise<string>;

    getOwnerOf(_proxy: string, overrides?: CallOverrides): Promise<string>;

    getProxyOf(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<[string, boolean]>;

    implementation(overrides?: CallOverrides): Promise<string>;

    isProxy(proxy: string, overrides?: CallOverrides): Promise<boolean>;

    ops(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DeployProxy(address,address,bytes32,bytes32,address)"(
      deployer?: string | null,
      owner?: string | null,
      seed?: null,
      salt?: null,
      proxy?: null,
    ): DeployProxyEventFilter;
    DeployProxy(
      deployer?: string | null,
      owner?: string | null,
      seed?: null,
      salt?: null,
      proxy?: null,
    ): DeployProxyEventFilter;
  };

  estimateGas: {
    deploy(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    determineProxyAddress(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNextSeed(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOwnerOf(_proxy: string, overrides?: CallOverrides): Promise<BigNumber>;

    getProxyOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    isProxy(proxy: string, overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    determineProxyAddress(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNextSeed(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOwnerOf(
      _proxy: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProxyOf(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProxy(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
