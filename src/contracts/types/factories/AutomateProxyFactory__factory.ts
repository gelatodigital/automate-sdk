/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  AutomateProxyFactory,
  AutomateProxyFactoryInterface,
} from "../AutomateProxyFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_ops",
        type: "address",
      },
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "seed",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
    ],
    name: "DeployProxy",
    type: "event",
  },
  {
    inputs: [],
    name: "deploy",
    outputs: [
      {
        internalType: "address payable",
        name: "proxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "deployFor",
    outputs: [
      {
        internalType: "address payable",
        name: "proxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "determineProxyAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getNextSeed",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_proxy",
        type: "address",
      },
    ],
    name: "getOwnerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getProxyOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "proxy",
        type: "address",
      },
    ],
    name: "isProxy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ops",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b506040516200213738038062002137833981810160405281019062000037919062000111565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000158565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d982620000ac565b9050919050565b620000eb81620000cc565b8114620000f757600080fd5b50565b6000815190506200010b81620000e0565b92915050565b600080604083850312156200012b576200012a620000a7565b5b60006200013b85828601620000fa565b92505060206200014e85828601620000fa565b9150509250929050565b60805160a051611fb262000185600039600081816103230152610a0d0152600061094b0152611fb26000f3fe60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c806374912cd2116200006f57806374912cd21462000197578063775c300c14620001cd578063bd4972c314620001ef578063ded89a7c1462000225578063e70abe92146200025c57620000ac565b80632971038814620000b157806337a6be1614620000e757806354fd4d50146200011d5780635c60da1b146200013f578063606aa7151462000161575b600080fd5b620000cf6004803603810190620000c9919062000b1a565b6200027e565b604051620000de919062000b69565b60405180910390f35b620001056004803603810190620000ff919062000b1a565b620002d4565b60405162000114919062000ba1565b60405180910390f35b620001276200031c565b60405162000136919062000bd9565b60405180910390f35b6200014962000321565b60405162000158919062000c07565b60405180910390f35b6200017f600480360381019062000179919062000b1a565b62000345565b6040516200018e919062000c07565b60405180910390f35b620001b56004803603810190620001af919062000b1a565b62000456565b604051620001c4919062000c49565b60405180910390f35b620001d7620007bc565b604051620001e6919062000c49565b60405180910390f35b6200020d600480360381019062000207919062000b1a565b620007ce565b6040516200021c919062000c07565b60405180910390f35b6200024360048036038101906200023d919062000b1a565b62000884565b6040516200025392919062000c66565b60405180910390f35b6200026662000949565b60405162000275919062000c07565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620003e9578091505062000451565b6000620003f6846200096d565b91505060006200040685620009e3565b9050600060ff60f81b308484805190602001206040516020016200042e949392919062000d59565b6040516020818303038152906040528051906020012090508060001c9450505050505b919050565b600081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200052a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005219062000e10565b60405180910390fd5b8262000536816200027e565b1562000579576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005709062000e82565b60405180910390fd5b60008062000587866200096d565b9150915060006200059887620009e3565b9050620005a6828262000a89565b955060018060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555085600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018360001c0160001b6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1bd7b67c90068c779f5700cbfefe89aea540a111a3eea6c228fd9d2b5d74a92a85858a604051620007aa9392919062000ea4565b60405180910390a35050505050919050565b6000620007c93362000456565b905090565b6000620007db826200027e565b6200081d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008149062000f31565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200092e57806001925092505062000944565b620009398462000345565b905080600092509250505b915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491508282604051602001620009c692919062000f53565b604051602081830303815290604052805190602001209050915091565b606060405180602001620009f79062000aa2565b6020820181038252601f19601f820116604052507f0000000000000000000000000000000000000000000000000000000000000000836040518060200160405280600081525060405160200162000a519392919062001024565b60405160208183030381529060405260405160200162000a73929190620010aa565b6040516020818303038152906040529050919050565b60008060208301835185818385f5935050505092915050565b610eaa80620010d383390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ae28262000ab5565b9050919050565b62000af48162000ad5565b811462000b0057600080fd5b50565b60008135905062000b148162000ae9565b92915050565b60006020828403121562000b335762000b3262000ab0565b5b600062000b438482850162000b03565b91505092915050565b60008115159050919050565b62000b638162000b4c565b82525050565b600060208201905062000b80600083018462000b58565b92915050565b6000819050919050565b62000b9b8162000b86565b82525050565b600060208201905062000bb8600083018462000b90565b92915050565b6000819050919050565b62000bd38162000bbe565b82525050565b600060208201905062000bf0600083018462000bc8565b92915050565b62000c018162000ad5565b82525050565b600060208201905062000c1e600083018462000bf6565b92915050565b600062000c318262000ab5565b9050919050565b62000c438162000c24565b82525050565b600060208201905062000c60600083018462000c38565b92915050565b600060408201905062000c7d600083018562000bf6565b62000c8c602083018462000b58565b9392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000cde62000cd88262000c93565b62000cbf565b82525050565b60008160601b9050919050565b600062000cfe8262000ce4565b9050919050565b600062000d128262000cf1565b9050919050565b62000d2e62000d288262000ad5565b62000d05565b82525050565b6000819050919050565b62000d5362000d4d8262000b86565b62000d34565b82525050565b600062000d67828762000cc9565b60018201915062000d79828662000d19565b60148201915062000d8b828562000d3e565b60208201915062000d9d828462000d3e565b60208201915081905095945050505050565b600082825260208201905092915050565b7f4f707350726f7879466163746f72793a204f6e652070726f7879000000000000600082015250565b600062000df8601a8362000daf565b915062000e058262000dc0565b602082019050919050565b6000602082019050818103600083015262000e2b8162000de9565b9050919050565b7f4f707350726f7879466163746f72793a204e6f2070726f787900000000000000600082015250565b600062000e6a60198362000daf565b915062000e778262000e32565b602082019050919050565b6000602082019050818103600083015262000e9d8162000e5b565b9050919050565b600060608201905062000ebb600083018662000b90565b62000eca602083018562000b90565b62000ed9604083018462000bf6565b949350505050565b7f4f707350726f7879466163746f72793a204e6f742070726f7879000000000000600082015250565b600062000f19601a8362000daf565b915062000f268262000ee1565b602082019050919050565b6000602082019050818103600083015262000f4c8162000f0a565b9050919050565b600060408201905062000f6a600083018562000bf6565b62000f79602083018462000b90565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000fbc57808201518184015260208101905062000f9f565b8381111562000fcc576000848401525b50505050565b6000601f19601f8301169050919050565b600062000ff08262000f80565b62000ffc818562000f8b565b93506200100e81856020860162000f9c565b620010198162000fd2565b840191505092915050565b60006060820190506200103b600083018662000bf6565b6200104a602083018562000bf6565b81810360408301526200105e818462000fe3565b9050949350505050565b600081905092915050565b6000620010808262000f80565b6200108c818562001068565b93506200109e81856020860162000f9c565b80840191505092915050565b6000620010b8828562001073565b9150620010c6828462001073565b9150819050939250505056fe608060405260405162000eaa38038062000eaa833981810160405281019062000029919062000450565b8282826200003e83826200005b60201b60201c565b6200004f826200019060201b60201c565b50505050505062000531565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc549050827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829660405160405180910390a36000825111156200018b5760008373ffffffffffffffffffffffffffffffffffffffff168360405162000132919062000518565b600060405180830381855af49150503d80600081146200016f576040519150601f19603f3d011682016040523d82523d6000602084013e62000174565b606091505b505090508062000189573d806000803e806000fd5b505b505050565b6000620001a26200022560201b60201c565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103558173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fdf435d422321da6b195902d70fc417c06a32f88379c20dd8f2a8da07088cec2960405160405180910390a35050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200028f8262000262565b9050919050565b620002a18162000282565b8114620002ad57600080fd5b50565b600081519050620002c18162000296565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200031c82620002d1565b810181811067ffffffffffffffff821117156200033e576200033d620002e2565b5b80604052505050565b6000620003536200024e565b905062000361828262000311565b919050565b600067ffffffffffffffff821115620003845762000383620002e2565b5b6200038f82620002d1565b9050602081019050919050565b60005b83811015620003bc5780820151818401526020810190506200039f565b83811115620003cc576000848401525b50505050565b6000620003e9620003e38462000366565b62000347565b905082815260208101848484011115620004085762000407620002cc565b5b620004158482856200039c565b509392505050565b600082601f830112620004355762000434620002c7565b5b815162000447848260208601620003d2565b91505092915050565b6000806000606084860312156200046c576200046b62000258565b5b60006200047c86828701620002b0565b93505060206200048f86828701620002b0565b925050604084015167ffffffffffffffff811115620004b357620004b26200025d565b5b620004c1868287016200041d565b9150509250925092565b600081519050919050565b600081905092915050565b6000620004ee82620004cb565b620004fa8185620004d6565b93506200050c8185602086016200039c565b80840191505092915050565b6000620005268284620004e1565b915081905092915050565b61096980620005416000396000f3fe6080604052600436106100435760003560e01c806301ffc9a71461005c5780633659cfe6146100995780633e47158c146100c25780634f1ef286146100ed57610052565b3661005257610050610109565b005b61005a610109565b005b34801561006857600080fd5b50610083600480360381019061007e91906105c5565b610152565b604051610090919061060d565b60405180910390f35b3480156100a557600080fd5b506100c060048036038101906100bb9190610686565b6102a3565b005b3480156100ce57600080fd5b506100d7610334565b6040516100e491906106c2565b60405180910390f35b61010760048036038101906101029190610742565b610343565b005b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc543660008037600080366000845af43d806000803e816000811461014d57816000f35b816000fd5b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101ad5750637f5828d060e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156101bb576001905061029e565b63ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036101f1576000905061029e565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a7846040518263ffffffff1660e01b815260040161025091906107b1565b602060405180830381865afa92505050801561028a57506040513d601f19601f8201168201806040525081019061028791906107f8565b60015b61029857600091505061029e565b80925050505b919050565b6102ab61040b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f90610882565b60405180910390fd5b6103318160405180602001604052806000815250610434565b50565b600061033e61040b565b905090565b61034b61040b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103af90610882565b60405180910390fd5b6104068383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610434565b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc549050827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829660405160405180910390a360008251111561055e5760008373ffffffffffffffffffffffffffffffffffffffff1683604051610508919061091c565b600060405180830381855af49150503d8060008114610543576040519150601f19603f3d011682016040523d82523d6000602084013e610548565b606091505b505090508061055c573d806000803e806000fd5b505b505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6105a28161056d565b81146105ad57600080fd5b50565b6000813590506105bf81610599565b92915050565b6000602082840312156105db576105da610563565b5b60006105e9848285016105b0565b91505092915050565b60008115159050919050565b610607816105f2565b82525050565b600060208201905061062260008301846105fe565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061065382610628565b9050919050565b61066381610648565b811461066e57600080fd5b50565b6000813590506106808161065a565b92915050565b60006020828403121561069c5761069b610563565b5b60006106aa84828501610671565b91505092915050565b6106bc81610648565b82525050565b60006020820190506106d760008301846106b3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610702576107016106dd565b5b8235905067ffffffffffffffff81111561071f5761071e6106e2565b5b60208301915083600182028301111561073b5761073a6106e7565b5b9250929050565b60008060006040848603121561075b5761075a610563565b5b600061076986828701610671565b935050602084013567ffffffffffffffff81111561078a57610789610568565b5b610796868287016106ec565b92509250509250925092565b6107ab8161056d565b82525050565b60006020820190506107c660008301846107a2565b92915050565b6107d5816105f2565b81146107e057600080fd5b50565b6000815190506107f2816107cc565b92915050565b60006020828403121561080e5761080d610563565b5b600061081c848285016107e3565b91505092915050565b600082825260208201905092915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061086c600e83610825565b915061087782610836565b602082019050919050565b6000602082019050818103600083015261089b8161085f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156108d65780820151818401526020810190506108bb565b838111156108e5576000848401525b50505050565b60006108f6826108a2565b61090081856108ad565b93506109108185602086016108b8565b80840191505092915050565b600061092882846108eb565b91508190509291505056fea26469706673582212206e91ee918eaf2d72006259ead94f89e030de6bc632993a508e2fef49a677f85c64736f6c634300080e0033a2646970667358221220a86b6d2e1229f333577eec3bcf9d70648b3925768ef88eae26abce869aba87f964736f6c634300080e0033";

type AutomateProxyFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AutomateProxyFactoryConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AutomateProxyFactory__factory extends ContractFactory {
  constructor(...args: AutomateProxyFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _ops: AddressLike,
    _implementation: AddressLike,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_ops, _implementation, overrides || {});
  }
  override deploy(
    _ops: AddressLike,
    _implementation: AddressLike,
    overrides?: NonPayableOverrides & { from?: string },
  ) {
    return super.deploy(_ops, _implementation, overrides || {}) as Promise<
      AutomateProxyFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null,
  ): AutomateProxyFactory__factory {
    return super.connect(runner) as AutomateProxyFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AutomateProxyFactoryInterface {
    return new Interface(_abi) as AutomateProxyFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): AutomateProxyFactory {
    return new Contract(
      address,
      _abi,
      runner,
    ) as unknown as AutomateProxyFactory;
  }
}
